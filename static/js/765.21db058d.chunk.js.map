{"version":3,"file":"static/js/765.21db058d.chunk.js","mappings":"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","sources":["algorithm.js","worker.js"],"sourcesContent":["//Variation of Bresenham's Algorithm\r\nexport function calculateLine(x1, y1, x2, y2) {\r\n\tconst incX = Math.sign(x2 - x1);\r\n\tconst dX = Math.abs(x2 - x1);\r\n\r\n\tconst incY = Math.sign(y2 - y1);\r\n\tconst dY = Math.abs(y2 - y1);\r\n\r\n\tconst XaY = dX > dY;\r\n\tconst incD = -2 * Math.abs(dX - dY);\r\n\tconst incS = 2 * Math.min(dX, dY);\r\n\tlet cmpt = Math.max(dX, dY);\r\n\r\n\tlet err = incD + cmpt;\r\n\tlet X = x1;\r\n\tlet Y = y1;\r\n\tconst pixelList = [];\r\n\twhile (cmpt >= 0) {\r\n\t\tpixelList.push([X, Y]);\r\n\t\tcmpt -= 1;\r\n\r\n\t\tif (err >= 0 || XaY) {\r\n\t\t\tX += incX;\r\n\t\t}\r\n\t\tif (err >= 0 || !XaY) {\r\n\t\t\tY += incY;\r\n\t\t}\r\n\t\tif (err >= 0) {\r\n\t\t\terr += incD;\r\n\t\t} else {\r\n\t\t\terr += incS;\r\n\t\t}\r\n\t}\r\n\r\n\treturn pixelList;\r\n}\r\n\r\n//Make matrix 4x smaller since only one value is important for each pixel (RGB are equal and all pixels have alpha of same value)\r\nfunction reduceMatrix(pixelMatrix) {\r\n\tconst reducedMatrix = [];\r\n\tfor (let i = 0; i < pixelMatrix.length; i += 4) {\r\n\t\treducedMatrix.push(pixelMatrix[i]);\r\n\t}\r\n\treturn reducedMatrix;\r\n}\r\n\r\n//Turn the matrix into a two dimmensional array instead of one\r\nfunction simplifyMatrix(pixelMatrix, width, heigh) {\r\n\tconst simplifiedMatrix = [];\r\n\tfor (let y = 0; y < heigh; y++) {\r\n\t\tconst column = [];\r\n\t\tfor (let x = 0; x < width; x++) {\r\n\t\t\tconst index = x * width + y;\r\n\t\t\tcolumn.push(pixelMatrix[index]);\r\n\t\t}\r\n\t\tsimplifiedMatrix.push(column);\r\n\t}\r\n\treturn simplifiedMatrix;\r\n}\r\n\r\nfunction measureBrightness(imageData, line) {\r\n\tlet lineBrightness = 0;\r\n\tfor (let pixel of line) {\r\n\t\tconst x = pixel[0];\r\n\t\tconst y = pixel[1];\r\n\t\tconst pixelBrightnes = imageData[x][y];\r\n\t\tlineBrightness += pixelBrightnes;\r\n\t}\r\n\tconst averageBrithness = lineBrightness / line.length;\r\n\r\n\treturn averageBrithness;\r\n}\r\n\r\nexport function geneatePinCoodinates(numberOfPoints, canvasSize) {\r\n\tconst center = [canvasSize / 2, canvasSize / 2];\r\n\tconst coords = [];\r\n\tfor (let i = 0; i < numberOfPoints; i++) {\r\n\t\tconst x = Math.floor(\r\n\t\t\tcenter[0] +\r\n\t\t\t\t(Math.cos((i * 2 * Math.PI) / numberOfPoints) * (canvasSize - 1)) / 2\r\n\t\t);\r\n\t\tconst y = Math.floor(\r\n\t\t\tcenter[1] +\r\n\t\t\t\t(Math.sin((i * 2 * Math.PI) / numberOfPoints) * (canvasSize - 1)) / 2\r\n\t\t);\r\n\t\tcoords.push([x, y]);\r\n\t}\r\n\treturn coords;\r\n}\r\n\r\nfunction preCalculateLines(numberOfNails, canvasSize) {\r\n\tconst lines = {};\r\n\tconst nailsCoords = geneatePinCoodinates(numberOfNails, canvasSize);\r\n\tfor (let nailOne = 0; nailOne < numberOfNails; nailOne++) {\r\n\t\tfor (let nailTwo = nailOne + 1; nailTwo < numberOfNails; nailTwo++) {\r\n\t\t\tconst x1 = nailsCoords[nailOne][0];\r\n\t\t\tconst y1 = nailsCoords[nailOne][1];\r\n\t\t\tconst x2 = nailsCoords[nailTwo][0];\r\n\t\t\tconst y2 = nailsCoords[nailTwo][1];\r\n\t\t\tconst line = calculateLine(x1, y1, x2, y2);\r\n\r\n\t\t\tconst key = `${nailOne}-${nailTwo}`;\r\n\t\t\tlines[key] = line;\r\n\t\t}\r\n\t}\r\n\treturn lines;\r\n}\r\n\r\n//Find the darkest line and the finishing nail of that line from a giving starting nail\r\nfunction chooseDarkestLine(image, numberOfNails, lines, startingNail) {\r\n\tlet darkestValue = Infinity;\r\n\tlet finishingNail = 0;\r\n\tfor (let secondNail = 0; secondNail < numberOfNails; secondNail++) {\r\n\t\tif (startingNail === secondNail) continue;\r\n\t\tconst nailOne = Math.min(startingNail, secondNail);\r\n\t\tconst nailTwo = Math.max(startingNail, secondNail);\r\n\t\tconst key = `${nailOne}-${nailTwo}`;\r\n\t\tconst line = lines[key];\r\n\t\tconst lineBrightness = measureBrightness(image, line);\r\n\r\n\t\tif (lineBrightness < darkestValue) {\r\n\t\t\tdarkestValue = lineBrightness;\r\n\t\t\tfinishingNail = secondNail;\r\n\t\t}\r\n\t}\r\n\r\n\tconst nailOne = Math.min(startingNail, finishingNail);\r\n\tconst nailTwo = Math.max(startingNail, finishingNail);\r\n\tconst key = `${nailOne}-${nailTwo}`;\r\n\r\n\treturn [finishingNail, lines[key]];\r\n}\r\n\r\nfunction removeLineFromImage(line, image, lineTranparency) {\r\n\tline.forEach((pixel) => {\r\n\t\tconst x = pixel[0];\r\n\t\tconst y = pixel[1];\r\n\t\timage[x][y] += Math.floor(lineTranparency * 255);\r\n\t});\r\n\treturn image;\r\n}\r\n\r\nexport default function generateStringArt(\r\n\timageData,\r\n\tnumberOfThreads,\r\n\tnumberOfNails,\r\n\tcanvasSize,\r\n\tlineTranparency\r\n) {\r\n\tconst reduced = reduceMatrix(imageData);\r\n\tconst simplified = simplifyMatrix(reduced, canvasSize, canvasSize);\r\n\tconst lines = preCalculateLines(numberOfNails, canvasSize);\r\n\tconst steps = [0];\r\n\r\n\tlet imageCopy = simplified;\r\n\r\n\tlet nail = 0;\r\n\tfor (let i = 0; i < numberOfThreads; i++) {\r\n\t\tconst [nextNail, darkestLine] = chooseDarkestLine(\r\n\t\t\timageCopy,\r\n\t\t\tnumberOfNails,\r\n\t\t\tlines,\r\n\t\t\tnail\r\n\t\t);\r\n\t\timageCopy = removeLineFromImage(darkestLine, imageCopy, lineTranparency);\r\n\t\tsteps.push(nextNail);\r\n\t\tnail = nextNail;\r\n\t}\r\n\r\n\treturn steps;\r\n}\r\n","import generateStringArt from \"./algorithm\";\r\n\r\nonmessage = (e) => {\r\n\tconst {imageData, numberOfPoints, numberOfThreads, screenSize, lineTranparency} = e.data\r\n\tconst generatedSteps = generateStringArt(imageData, numberOfThreads, numberOfPoints, screenSize, lineTranparency)\r\n\tpostMessage(generatedSteps)\r\n};\r\n"],"names":["calculateLine","x1","y1","x2","y2","incX","Math","sign","dX","abs","incY","dY","XaY","incD","incS","min","cmpt","max","err","X","Y","pixelList","push","measureBrightness","imageData","line","lineBrightness","pixel","x","y","length","preCalculateLines","numberOfNails","canvasSize","lines","nailsCoords","numberOfPoints","center","coords","i","floor","cos","PI","sin","geneatePinCoodinates","nailOne","nailTwo","concat","chooseDarkestLine","image","startingNail","darkestValue","Infinity","finishingNail","secondNail","removeLineFromImage","lineTranparency","forEach","onmessage","e","numberOfThreads","screenSize","data","generatedSteps","simplified","pixelMatrix","width","heigh","simplifiedMatrix","column","index","simplifyMatrix","reducedMatrix","reduceMatrix","steps","imageCopy","nail","nextNail","darkestLine","generateStringArt","postMessage"],"sourceRoot":""}